# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:06:49+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, conint, constr


class BoundingBox(BaseModel):
    maxX: Optional[int] = Field(
        None,
        description='X-coordinate of the left side of the bounding box. The origin of the coordinate system is the top-left of the image. Number of pixels from the left edge of the image.',
    )
    maxY: Optional[int] = Field(
        None,
        description='Y-coordinate of the top of the bounding box. Number of pixels from the top edge of the image.',
    )
    minX: Optional[int] = Field(
        None,
        description='X-coordinate of the right side of the bounding box. Number of pixels from the left edge of the image.',
    )
    minY: Optional[int] = Field(
        None,
        description='Y-coordinate of the bottom of the bounding box. Number of pixels from the top edge of the image.',
    )


class CellLocation(BaseModel):
    colIndex: Optional[int] = Field(
        None, description='Index of the column that contains the detected text.'
    )
    rowIndex: Optional[int] = Field(
        None, description='Index of the row that contains the detected text.'
    )


class Status(Enum):
    QUEUED = 'QUEUED'
    RUNNING = 'RUNNING'
    SUCCEEDED_WAITING_FOR_CACHE_REMOVAL = 'SUCCEEDED_WAITING_FOR_CACHE_REMOVAL'
    SUCCEEDED = 'SUCCEEDED'
    KILLED = 'KILLED'
    FAILED = 'FAILED'
    RETRY = 'RETRY'


class Type(Enum):
    DATASET = 'DATASET'
    MODEL = 'MODEL'


class DeletionResponse(BaseModel):
    deletedObjectId: Optional[str] = Field(
        None,
        examples=['1003360'],
        title='ID of the object deleted. Depending on the object you delete, this contains the dataset ID or the model ID.',
    )
    id: Optional[str] = Field(
        None, examples=['Z2JTFBF3A7XKIJC5QEJXMO4HSY'], title='ID of the deletion'
    )
    message: Optional[str] = Field(
        None,
        title='Additional information about the deletion. For example, a message is returned if the deletion fails.',
    )
    object: Optional[str] = Field(
        None, examples=['deletion'], title='Object returned; in this case, deletion.'
    )
    organizationId: Optional[str] = Field(
        None,
        examples=['2'],
        title='ID of the org to which the dataset or model being deleted belongs.',
    )
    progress: Optional[float] = Field(
        None,
        examples=[1],
        title='How far the deletion has progressed. Values are between 0�1.',
    )
    status: Optional[Status] = Field(None, title='Status of the deletion.')
    type: Optional[Type] = Field(None, title="Object that's being deleted")


class DetectionResult(BaseModel):
    boundingBox: Optional[BoundingBox] = None
    label: Optional[str] = Field(None, description='Probability lable for the input. ')
    probability: Optional[float] = Field(
        None, description='Probability value for the input. Values are between 0�1.'
    )


class EntityObject(BaseModel):
    boundingBox: Optional[BoundingBox] = None
    entity: Optional[str] = None
    text: Optional[str] = None


class GenerateAccessTokenResponse(BaseModel):
    access_token: Optional[str] = Field(
        None,
        examples=[
            'SPFPQ5IBLB6DPE6FKPWHMIWW4MCRICX4M4KQXFQMI6THZXIEZ6QGNWNOERD6S7655LJAFWTRIKC4KGYO5G3XROMEOTBSS53CFSB6GIA'
        ],
        title='Access token for authorization.',
    )
    expires_in: Optional[str] = Field(
        None,
        examples=['120'],
        title='Number of seconds that the token will expire from the time it was generated.',
    )
    refresh_token: Optional[str] = Field(
        None,
        examples=[
            'FL4GSVQS4W5CKSFRVZBLPIVZZJ2K4VIFPLGZ45SJGUQK4SS56IWPWACZ7V2B7OVLVKZCNK5JZSSW7CIHCNQJAO3TOUE3375108HHTLY'
        ],
        title='Refresh token that can be used to generate an access token. Only returned when you pass the scope=offline parameter to the endpoint.',
    )
    token_type: Optional[str] = Field(
        None, examples=['Bearer'], title='Type of token returned. Always Bearer.'
    )


class ImageClassificationRequest(BaseModel):
    modelId: str = Field(
        ...,
        description='ID of the model that makes the prediction.',
        examples=['WJH4YCA7YX4PCWVNCYNWYHBMY4'],
    )
    numResults: Optional[conint(ge=1)] = Field(
        None, description='Number of probabilities to return.', examples=[3]
    )
    sampleBase64Content: Optional[str] = Field(
        None,
        description='The image contained in a base64 string.',
        examples=['SomeBase64EncodedImage'],
    )
    sampleId: Optional[str] = Field(
        None,
        description='String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response.',
    )
    sampleLocation: Optional[str] = Field(None, description='URL of the image file.')


class IntentPredictRequest(BaseModel):
    document: str = Field(
        ...,
        description='Text for which you want to return an intent prediction.',
        examples=["I can't tell you how much fun it was"],
    )
    modelId: str = Field(
        ...,
        description='ID of the model that makes the prediction. The model must have been created from a dataset with a type of text-sentiment.',
        examples=['WJH4YCA7YX4PCWVNCYNWYHBMY4'],
    )
    numResults: Optional[conint(ge=1)] = Field(
        None, description='Number of probabilities to return. ', examples=[3]
    )
    sampleId: Optional[str] = Field(
        None,
        description='String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response.',
    )


class Label(BaseModel):
    datasetId: int = Field(
        ..., description='ID of the dataset that the label belongs to.', examples=[57]
    )
    id: Optional[int] = Field(None, description='ID of the label.', examples=[621])
    name: str = Field(..., description='Name of the label.', examples=['Mountain'])
    numExamples: Optional[int] = Field(
        None, description='Number of examples that have the label.', examples=[40]
    )


class LabelResult(BaseModel):
    label: Optional[str] = Field(None, description='Probability lable for the input. ')
    probability: Optional[float] = Field(
        None, description='Probability value for the input. Values are between 0�1.'
    )


class LabelSummary(BaseModel):
    labels: Optional[List[Label]] = None


class LearningCurve(BaseModel):
    epoch: Optional[Dict[str, Any]] = Field(
        None, description='Epoch to which the metrics correspond.', examples=[1]
    )
    epochResults: Optional[Dict[str, Any]] = Field(
        None,
        description='Prediction results for the set of data used to test the model during training.',
    )
    metricsData: Optional[Dict[str, Any]] = Field(
        None, description='Model metrics values.'
    )
    object: Optional[str] = Field(
        None,
        description='Object returned; in this case, learningcurve.',
        examples=['learningcurve'],
    )


class LearningCurveList(BaseModel):
    data: Optional[List[LearningCurve]] = None
    object: Optional[str] = Field(
        None, examples=['list'], title='Object returned; in this case, list.'
    )


class Metrics(BaseModel):
    algorithm: Optional[str] = None
    createdAt: Optional[datetime] = Field(
        None, description='Date and time that the model was created.'
    )
    id: Optional[str] = Field(None, description='Model Id')
    language: Optional[str] = None
    metricsData: Optional[Dict[str, Any]] = Field(
        None, description='Model metrics values.'
    )
    object: Optional[str] = None


class Status1(Enum):
    QUEUED = 'QUEUED'
    RUNNING = 'RUNNING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    KILLED = 'KILLED'
    FAILED_WITH_RETRIES = 'FAILED_WITH_RETRIES'


class Model(BaseModel):
    algorithm: Optional[str] = Field(
        None,
        description='Algorithm used to create the model. Returned only when the modelType is image-detection.',
        examples=['object-detection'],
    )
    createdAt: Optional[datetime] = Field(
        None, description='Date and time that the model was created.'
    )
    datasetId: int = Field(
        ..., description='ID of the dataset trained to create the model.', examples=[57]
    )
    datasetVersionId: int = Field(..., description='Not available yet', examples=[0])
    failureMsg: Optional[str] = Field(
        None,
        description='Reason the dataset training failed. Returned only if the training status is FAILED.',
        examples=[
            'To train a dataset and create a model, the dataset must contain at least 100 examples per label for test set'
        ],
    )
    language: Optional[str] = Field(
        None,
        description='Model language inherited from the dataset language. For image datasets, default is N/A. For text datasets, default is en_US.',
        examples=['en_US'],
    )
    modelId: str = Field(
        ...,
        description='ID of the model. Contains letters and numbers.',
        examples=['2KXJEOM3N562JBT4P7OX7VID2Q'],
    )
    modelType: Optional[str] = Field(
        None, description='Type of data from which the model was created.'
    )
    name: str = Field(
        ..., description='Name of the model.', examples=['My Model - Version1']
    )
    object: Optional[str] = Field(
        None, description='Object returned; in this case, model.', examples=['model']
    )
    progress: float = Field(
        ...,
        description='How far the dataset training has progressed. Values are between 0�1.',
    )
    status: Status1 = Field(..., description='Status of the model.')
    updatedAt: Optional[datetime] = Field(
        None, description='Date and time that the model was last updated.'
    )


class ModelList(BaseModel):
    data: Optional[List[Model]] = None
    object: Optional[str] = Field(
        None, examples=['list'], title='Object returned; in this case, list.'
    )


class ObjectDetectionRequest(BaseModel):
    modelId: str = Field(
        ...,
        description='ID of the model that makes the detection.',
        examples=['YCQ4ZACEPJFGXZNRA6ERF3GL5E'],
    )
    sampleBase64Content: Optional[str] = Field(
        None,
        description='The image contained in a base64 string.',
        examples=['SomeBase64EncodedImage'],
    )
    sampleId: Optional[str] = Field(
        None,
        description='String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response.',
    )
    sampleLocation: Optional[str] = Field(None, description='URL of the image file.')


class ObjectDetectionResponse(BaseModel):
    object: Optional[str] = Field(
        None,
        examples=['predictresponse'],
        title='Object returned; in this case, predictresponse.',
    )
    probabilities: Optional[List[DetectionResult]] = None
    sampleId: Optional[str] = Field(
        None,
        description='Value passed in when the prediction call was made. Returned only if the sampleId request parameter is provided.',
        examples=['Sample1'],
    )


class Plan(Enum):
    STARTER = 'STARTER'
    SFDC_1M_EDITION = 'SFDC_1M_EDITION'
    BRONZE = 'BRONZE'
    SILVER = 'SILVER'
    GOLD = 'GOLD'
    DATASET_DOWNLOAD = 'DATASET_DOWNLOAD'


class Source(Enum):
    SALESFORCE = 'SALESFORCE'
    HEROKU = 'HEROKU'
    SF_AUTO_PROVISION = 'SF_AUTO_PROVISION'
    SF_AUTO_PROVISION_BOUND = 'SF_AUTO_PROVISION_BOUND'


class PlanData(BaseModel):
    amount: Optional[int] = Field(
        None, examples=[1], title='Number of plans of the specified type.'
    )
    plan: Optional[Plan] = Field(None, title='Type of plan based on the source.')
    source: Optional[Source] = Field(None, title='Service that provisioned the plan.')


class PredictionErrorResponse(BaseModel):
    message: Optional[str] = None
    object: Optional[str] = None


class SentimentPredictRequest(BaseModel):
    document: str = Field(
        ...,
        description='Text for which you want to return a sentiment prediction.',
        examples=["I can't tell you how much fun it was"],
    )
    modelId: str = Field(
        ...,
        description='ID of the model that makes the prediction. The model must have been created from a dataset with a type of text-sentiment.',
        examples=['WJH4YCA7YX4PCWVNCYNWYHBMY4'],
    )
    numResults: Optional[conint(ge=1)] = Field(
        None, description='Number of probabilities to return. ', examples=[3]
    )
    sampleId: Optional[str] = Field(
        None,
        description='String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response.',
    )


class SentimentPredictResponse(BaseModel):
    object: Optional[str] = Field(
        None,
        examples=['predictresponse'],
        title='Object returned; in this case, predictresponse.',
    )
    probabilities: Optional[List[LabelResult]] = None
    sampleId: Optional[str] = Field(
        None,
        description='Value passed in when the prediction call was made. Returned only if the sampleId request parameter is provided.',
        examples=['Sample1'],
    )


class TrainResponse(BaseModel):
    algorithm: Optional[str] = Field(
        None,
        description='Algorithm used to create the model. Returned only when the modelType is image-detection.',
        examples=['object-detection'],
    )
    createdAt: Optional[datetime] = Field(
        None, description='Date and time that the model was created.'
    )
    datasetId: int = Field(
        ..., description='ID of the dataset trained to create the model.', examples=[57]
    )
    datasetVersionId: int = Field(..., description='Not available yet', examples=[0])
    epochs: Optional[int] = Field(
        None, description='Number of epochs used during training.', examples=[20]
    )
    failureMsg: Optional[str] = Field(
        None,
        description='Reason the dataset training failed. Returned only if the training status is FAILED.',
        examples=[
            'To train a dataset and create a model, the dataset must contain at least 100 examples per label for test set'
        ],
    )
    language: str = Field(
        ...,
        description='Model language inherited from the dataset language. For image datasets, default is N/A. For text datasets, default is en_US.',
        examples=['en_US'],
    )
    learningRate: Optional[float] = Field(
        None, description='Learning rate used during training.', examples=[0.0001]
    )
    modelId: str = Field(
        ...,
        description='ID of the model. Contains letters and numbers.',
        examples=['2KXJEOM3N562JBT4P7OX7VID2Q'],
    )
    modelType: Optional[str] = Field(
        None, description='Type of data from which the model was created.'
    )
    name: str = Field(
        ..., description='Name of the model.', examples=['My Model - Version1']
    )
    object: Optional[str] = Field(
        None,
        description='Object returned; in this case, training.',
        examples=['training'],
    )
    progress: float = Field(
        ...,
        description='How far the dataset training has progressed. Values are between 0�1.',
        examples=[0.7],
    )
    queuePosition: Optional[int] = Field(
        None,
        description='Where the training job is in the queue. This field appears in the response only if the status is QUEUED.',
        examples=[1],
    )
    status: Status1 = Field(..., description='Status of the model.')
    trainParams: Optional[str] = Field(
        None,
        description='Training parameters passed into the request.',
        examples=['{"trainSplitRatio":0.7}'],
    )
    trainStats: Optional[str] = Field(
        None,
        description='Returns null when you train a dataset. Training statistics are returned when the status is SUCCEEDED or FAILED.',
    )
    updatedAt: Optional[datetime] = Field(
        None, description='Date and time that the model was last updated.'
    )


class V2LanguageTrainParams(BaseModel):
    trainSplitRatio: Optional[float] = Field(
        None,
        description='Lets you specify the ratio of data used to train the dataset and the data used to test the model.',
        examples=[0.9],
    )
    withFeedback: Optional[bool] = Field(
        None,
        description='Lets you specify that feedback examples are included in the data to be trained to create the model.',
    )
    withGlobalDatasetId: Optional[int] = Field(
        None,
        description='Lets you specify that a global dataset is used in addition to the specified dataset to create the model.',
    )


class V2VisionTrainParams(BaseModel):
    trainSplitRatio: Optional[float] = Field(
        None,
        description='Lets you specify the ratio of data used to train the dataset and the data used to test the model.',
        examples=[0.9],
    )
    withFeedback: Optional[bool] = Field(
        None,
        description='Lets you specify that feedback examples are included in the data to be trained to create the model.',
    )
    withGlobalDatasetId: Optional[int] = Field(
        None,
        description='Lets you specify that a global dataset is used in addition to the specified dataset to create the model.',
    )


class Type1(Enum):
    text_intent = 'text-intent'
    text_sentiment = 'text-sentiment'


class V2LanguageDatasetsUploadPostRequest(BaseModel):
    data: Optional[str] = Field(
        None,
        description='Path to the .csv, .tsv, or .json file on the local drive (FilePart).',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the dataset. Optional. If this parameter is omitted, the dataset name is derived from the file name.',
        examples=['weather'],
    )
    path: Optional[str] = Field(
        None, description='URL of the .csv, .tsv, or .json file.'
    )
    type: Optional[Type1] = Field(None, description='Type of dataset data.')


class V2LanguageDatasetsUploadSyncPostRequest(BaseModel):
    data: Optional[str] = Field(
        None,
        description='Path to the .csv, .tsv, or .json file on the local drive (FilePart).',
    )
    name: Optional[str] = Field(
        None,
        description='Name of the dataset. Optional. If this parameter is omitted, the dataset name is derived from the file name.',
        examples=['weather'],
    )
    path: Optional[str] = Field(
        None, description='URL of the .csv, .tsv, or .json file.'
    )
    type: Optional[Type1] = Field(None, description='Type of dataset data.')


class Source1(Enum):
    all = 'all'
    feedback = 'feedback'
    upload = 'upload'


class V2LanguageDatasetsDatasetIdUploadPutRequest(BaseModel):
    data: Optional[str] = Field(
        None, description='Path to the .csv, .tsv, or .json file on a local drive. '
    )
    type: Optional[str] = Field(
        None, description='URL of the .csv, .tsv, or .json file.'
    )


class V2LanguageFeedbackPostRequest(BaseModel):
    document: Optional[str] = Field(
        None, description='Intent or sentiment string to add to the dataset.'
    )
    expectedLabel: Optional[str] = Field(
        None,
        description='Correct label for the example. Must be a label that exists in the dataset.',
    )
    modelId: Optional[str] = Field(
        None,
        description='ID of the model that misclassified the image. The feedback example is added to the dataset associated with this model.',
    )
    name: Optional[constr(max_length=180)] = Field(
        None,
        description='Name of the example. Optional. Maximum length is 180 characters.',
        examples=['feedback-2'],
    )


class V2LanguageRetrainPostRequest(BaseModel):
    algorithm: Optional[str] = Field(
        None, description='Algorithm used for train', examples=['intent']
    )
    epochs: Optional[conint(ge=1, le=1000)] = Field(
        None,
        description='Number of training iterations for the neural network. Optional.',
        examples=[20],
    )
    learningRate: Optional[float] = Field(
        None, description='N/A for intent or sentiment models.', examples=[0.0001]
    )
    modelId: Optional[str] = Field(
        None,
        description='ID of the model to be updated from the training.',
        examples=['7JXCXTRXTMNLJCEF2DR5CJ46QU'],
    )
    trainParams: Optional[V2LanguageTrainParams] = None


class V2LanguageTrainPostRequest(BaseModel):
    algorithm: Optional[str] = Field(
        None, description='Algorithm used for train', examples=['intent']
    )
    datasetId: Optional[int] = Field(
        None, description='ID of the dataset to train.', examples=[57]
    )
    epochs: Optional[conint(ge=1, le=1000)] = Field(
        None,
        description='Number of training iterations for the neural network. Optional.',
        examples=[20],
    )
    learningRate: Optional[float] = Field(
        None, description='N/A for intent or sentiment models.'
    )
    name: Optional[constr(max_length=180)] = Field(
        None, description='Name of the model. Maximum length is 180 characters.'
    )
    trainParams: Optional[V2LanguageTrainParams] = None


class GrantType(Enum):
    urn_ietf_params_oauth_grant_type_jwt_bearer = (
        'urn:ietf:params:oauth:grant-type:jwt-bearer'
    )
    refresh_token = 'refresh_token'


class V2Oauth2TokenPostRequest(BaseModel):
    assertion: Optional[str] = Field(
        None,
        description='encrypted payload to identify yourself',
        examples=['SOME_ASSERTION_STRING'],
    )
    grant_type: Optional[GrantType] = Field(
        None,
        description='specify the authentication method desired',
        examples=['urn:ietf:params:oauth:grant-type:jwt-bearer'],
    )
    refresh_token: Optional[str] = Field(
        None,
        description='The refresh token you created previously.',
        examples=['SomeRefreshToken'],
    )
    scope: Optional[str] = Field(
        None,
        description='set to `offline` to generate a refresh token',
        examples=['offline'],
    )
    valid_for: Optional[int] = Field(
        60,
        description='Number of seconds until the access token expires. Default is 60 seconds. Maximum value is 30 days',
        examples=[120],
    )


class V2VisionBulkfeedbackPutRequest(BaseModel):
    data: Optional[str] = Field(
        None,
        description='Local .zip file to upload. The maximum .zip file size you can upload from a local drive is 50 MB.',
    )
    modelId: Optional[str] = Field(
        None,
        description='ID of the model that misclassified the images. The feedback examples are added to the dataset associated with this model.',
    )


class Type3(Enum):
    image = 'image'
    image_multi_label = 'image-multi-label'


class V2VisionDatasetsPostRequest(BaseModel):
    labels: Optional[str] = Field(
        None,
        description='Optional comma-separated list of labels. If specified, creates the labels in the dataset. Maximum number of labels per dataset is 250.',
        examples=['beach,mountain'],
    )
    name: Optional[constr(max_length=180)] = Field(
        None,
        description='Name of the dataset. Maximum length is 180 characters.',
        examples=['Beach and Mountain'],
    )
    type: Optional[Type3] = Field(None, description='Type of dataset data')


class Type4(Enum):
    image = 'image'
    image_detection = 'image-detection'
    image_multi_label = 'image-multi-label'


class V2VisionDatasetsUploadPostRequest(BaseModel):
    data: Optional[str] = Field(
        None, description='Path to the .zip file on the local drive (FilePart).'
    )
    name: Optional[str] = Field(
        None,
        description='Name of the dataset. Optional. If this parameter is omitted, the dataset name is derived from the .zip file name.',
        examples=['mountainvsbeach'],
    )
    path: Optional[str] = Field(None, description='URL of the .zip file.')
    type: Optional[Type4] = Field(None, description='Type of dataset data.')


class V2VisionDatasetsUploadSyncPostRequest(BaseModel):
    data: Optional[str] = Field(
        None, description='Path to the .zip file on the local drive (FilePart).'
    )
    name: Optional[str] = Field(
        None,
        description='Name of the dataset. Optional. If this parameter is omitted, the dataset name is derived from the .zip file name.',
        examples=['mountainvsbeach'],
    )
    path: Optional[str] = Field(None, description='URL of the .zip file.')
    type: Optional[Type4] = Field(None, description='Type of dataset data.')


class V2VisionDatasetsDatasetIdExamplesPostRequest(BaseModel):
    data: Optional[str] = Field(
        None, description='Location of the local image file to upload.'
    )
    labelId: Optional[int] = Field(
        None, description='ID of the label to add to the example.', examples=[42]
    )
    name: Optional[constr(max_length=180)] = Field(
        None, description='Name of the example. Maximum length is 180 characters.'
    )


class V2VisionDatasetsDatasetIdUploadPutRequest(BaseModel):
    data: Optional[str] = Field(
        None, description='Location of the local image file to upload.'
    )
    path: Optional[str] = Field(None, description='URL of the .zip file.')


class V2VisionFeedbackPostRequest(BaseModel):
    data: Optional[str] = Field(None, description='Local image file to upload.')
    expectedLabel: Optional[str] = Field(
        None,
        description='Correct label for the example. Must be a label that exists in the dataset.',
    )
    modelId: Optional[str] = Field(
        None,
        description='ID of the model that misclassified the image. The feedback example is added to the dataset associated with this model.',
    )
    name: Optional[constr(max_length=180)] = Field(
        None,
        description='Name of the example. Optional. Maximum length is 180 characters.',
        examples=['feedback-1'],
    )


class V2VisionOcrPostRequest(BaseModel):
    modelId: Optional[str] = Field(
        None,
        description='ID of the model that makes the prediction. Valid values are OCRModel and tabulatev2.',
        examples=['WJH4YCA7YX4PCWVNCYNWYHBMY4'],
    )
    sampleContent: Optional[bytes] = Field(
        None,
        description='Binary content of image file uploaded as multipart/form-data. Optional.',
    )
    sampleId: Optional[str] = Field(
        None,
        description='String that you can pass in to tag the prediction. Optional. Can be any value, and is returned in the response.',
    )
    sampleLocation: Optional[str] = Field(
        None,
        description='URL of the image file. Use this parameter when sending in a file from a web location. Optional.',
    )
    task: Optional[str] = Field(
        'text',
        description='Optional. Designates the type of data in the image. Default is text. Valid values: contact, table, and text.',
        examples=['table'],
    )


class V2VisionRetrainPostRequest(BaseModel):
    algorithm: Optional[str] = Field(
        None,
        description='Specifies the algorithm used to train the dataset. Optional. Use this parameter only when training a dataset with a type of image-detection. Valid values are object-detection-v1 and retail-execution.',
        examples=['object-detection'],
    )
    epochs: Optional[conint(ge=1, le=1000)] = Field(
        None,
        description='Number of training iterations for the neural network. Optional.',
        examples=[20],
    )
    learningRate: Optional[float] = Field(
        None,
        description='Specifies how much the gradient affects the optimization of the model at each time step. Optional.',
        examples=[0.0001],
    )
    modelId: Optional[str] = Field(
        None,
        description='ID of the model to be updated from the training.',
        examples=['7JXCXTRXTMNLJCEF2DR5CJ46QU'],
    )
    trainParams: Optional[V2VisionTrainParams] = None


class V2VisionTrainPostRequest(BaseModel):
    algorithm: Optional[str] = Field(
        None,
        description='Specifies the algorithm used to train the dataset. Optional. Use this parameter only when training a dataset with a type of image-detection. Valid values are object-detection-v1 and retail-execution.',
        examples=['object-detection'],
    )
    datasetId: Optional[int] = Field(
        None, description='ID of the dataset to train.', examples=[57]
    )
    epochs: Optional[conint(ge=1, le=1000)] = Field(
        None,
        description='Number of training iterations for the neural network. Optional.',
        examples=[20],
    )
    learningRate: Optional[float] = Field(
        None,
        description='Specifies how much the gradient affects the optimization of the model at each time step. Optional.',
        examples=[0.0001],
    )
    name: Optional[constr(max_length=180)] = Field(
        None, description='Name of the model. Maximum length is 180 characters.'
    )
    trainParams: Optional[V2VisionTrainParams] = None


class ApiUsage(BaseModel):
    endsAt: Optional[datetime] = Field(
        None,
        title='Date and time that the plan calendar month ends. Always 12 am on the first day of the following month.',
    )
    id: Optional[str] = Field(
        None, examples=['489'], title='Unique ID for the API usage plan month'
    )
    licenseId: Optional[str] = Field(
        None, examples=['kJCHtYDCSf'], title='Unique ID of the API plan.'
    )
    object: Optional[str] = Field(
        None, examples=['apiusage'], title='Object returned; in this case, apiusage.'
    )
    organizationId: Optional[str] = Field(
        None, examples=['108'], title='Unique ID for the user making the API call'
    )
    planData: Optional[List[PlanData]] = Field(None, title='Plan data details')
    predictionsMax: Optional[int] = Field(
        None,
        examples=[1997],
        title='Number of predictions left for the calendar month.',
    )
    predictionsUsed: Optional[int] = Field(
        None, examples=[3], title='Number of predictions used in the calendar month.'
    )
    startsAt: Optional[datetime] = Field(
        None,
        title='Date and time that the plan calendar month begins. Always the first of the month.',
    )


class ApiUsageList(BaseModel):
    data: Optional[List[ApiUsage]] = None
    object: Optional[str] = Field(
        None, examples=['list'], title='Object returned; in this case, list.'
    )


class Attributes(BaseModel):
    cellLocation: Optional[CellLocation] = None
    language: Optional[str] = None
    pageNumber: Optional[str] = None
    tag: Optional[str] = None
    value: Optional[EntityObject] = None


class Dataset(BaseModel):
    available: Optional[bool] = Field(
        None, title='Specifies whether the dataset is ready to be trained.'
    )
    createdAt: Optional[datetime] = Field(
        None, description='Date and time that the dataset was created.'
    )
    id: int = Field(..., examples=[1000014], title='Dataset ID.')
    labelSummary: Optional[LabelSummary] = None
    language: Optional[str] = Field(
        None, description='Dataset language.', examples=['N/A']
    )
    name: str = Field(..., examples=['weather report'], title='Name of the dataset.')
    numOfDuplicates: Optional[int] = Field(
        None,
        description='Number of duplicate images. This number includes duplicates in the .zip file from which the dataset was created plus the number of duplicate images from subsequent PUT calls to add images to the dataset.',
    )
    object: Optional[str] = Field(
        None,
        description='Object returned; in this case, dataset.',
        examples=['dataset'],
    )
    statusMsg: Optional[str] = Field(
        None,
        examples=['SUCCEEDED'],
        title='Status of the dataset creation and data upload.',
    )
    totalExamples: Optional[int] = Field(
        None, description='Total number of examples in the dataset.', examples=[20]
    )
    totalLabels: Optional[int] = Field(
        None, description='Total number of labels in the dataset.', examples=[2]
    )
    type: Optional[str] = Field(None, title='Type of dataset data.')
    updatedAt: Optional[datetime] = Field(
        None, title='Date and time that the dataset was last updated.'
    )


class DatasetList(BaseModel):
    data: Optional[List[Dataset]] = None
    object: Optional[str] = Field(
        None, examples=['list'], title='Object returned; in this case, list.'
    )


class Example(BaseModel):
    createdAt: Optional[datetime] = Field(
        None, description='Date and time that the example was created.'
    )
    id: int = Field(..., description='ID of the example.', examples=[546])
    label: Optional[Label] = None
    location: Optional[str] = Field(
        None,
        description='URL of the image in the dataset. This is a temporary URL that expires in 30 minutes. This URL can be used to display images that were uploaded to a dataset in a UI.',
        examples=['https://K3A04Q79O5TBySIZSeMIj%2BC3zqi7rOmeK...'],
    )
    name: str = Field(
        ..., description='Name of the example.', examples=['659803277.jpg']
    )
    object: Optional[str] = Field(
        None,
        description='Object returned; in this case, example.',
        examples=['example'],
    )


class ExampleList(BaseModel):
    data: Optional[List[Example]] = None
    object: Optional[str] = Field(
        None, examples=['list'], title='Object returned; in this case, list.'
    )


class ImageClassificationResponse(BaseModel):
    object: Optional[str] = Field(
        None,
        examples=['predictresponse'],
        title='Object returned; in this case, predictresponse.',
    )
    probabilities: Optional[List[LabelResult]] = None
    sampleId: Optional[str] = Field(
        None,
        description='Value passed in when the prediction call was made. Returned only if the sampleId request parameter is provided.',
        examples=['Sample1'],
    )


class IntentPredictResponse(BaseModel):
    object: Optional[str] = Field(
        None,
        examples=['predictresponse'],
        title='Object returned; in this case, predictresponse.',
    )
    probabilities: Optional[List[LabelResult]] = None
    sampleId: Optional[str] = Field(
        None,
        description='Value passed in when the prediction call was made. Returned only if the sampleId request parameter is provided.',
        examples=['Sample1'],
    )


class OCRResult(BaseModel):
    attributes: Optional[Attributes] = None
    boundingBox: Optional[BoundingBox] = None
    label: Optional[str] = Field(None, description='Content of the detected text.')
    probability: Optional[float] = Field(
        None, description='Probability value for the input. Values are between 0�1.'
    )


class OCRPredictResponse(BaseModel):
    object: Optional[str] = Field(
        None,
        examples=['predictresponse'],
        title='Object returned; in this case, predictresponse.',
    )
    probabilities: Optional[List[OCRResult]] = None
    sampleId: Optional[str] = Field(
        None,
        description='Same value as request parameter. Returned only if the sampleId request parameter is provided.',
        examples=['Sample1'],
    )
    task: Optional[str] = Field(
        None,
        description="Same value as request parameter. Returns text if the request parameter isn't supplied.",
        examples=['Task1'],
    )

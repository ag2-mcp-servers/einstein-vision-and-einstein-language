# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:06:49+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBearer
from fastapi import Path, Query, UploadFile
from starlette.requests import Request

from models import (
    ApiUsageList,
    Dataset,
    DatasetList,
    DeletionResponse,
    Example,
    ExampleList,
    GenerateAccessTokenResponse,
    ImageClassificationRequest,
    ImageClassificationResponse,
    IntentPredictRequest,
    IntentPredictResponse,
    LearningCurveList,
    Metrics,
    ModelList,
    ObjectDetectionRequest,
    ObjectDetectionResponse,
    OCRPredictResponse,
    PredictionErrorResponse,
    SentimentPredictRequest,
    SentimentPredictResponse,
    Source1,
    TrainResponse,
)

app = MCPProxy(
    description='Provided by [Salesforce](https://www.einstein-hub.com/)  � Copyright 2000�2020 salesforce.com, inc. All rights reserved. Salesforce is a registered trademark of salesforce.com, inc., as are other names and marks. Other marks appearing herein may be trademarks of their respective owners. **Last updated:** Aug 17, 2020',
    title='Einstein Vision and Einstein Language',
    version='2.0.1',
    servers=[{'url': 'http://salesforce.local'}],
)


@app.get(
    '/v2/apiusage',
    description=""" Returns prediction usage on a monthly basis for the current calendar month and future months. Each apiusage object in the response corresponds to a calendar month in your plan. """,
    tags=['api_usage_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_api_usage_plans_v2():
    """
    Get API Isage
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/language/datasets',
    description=""" Returns a list of datasets and their labels that were created by the current user. The response is sorted by dataset ID. """,
    tags=['dataset_management', 'dataset_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def list_datasets(
    offset: Optional[str] = '0',
    count: Optional[str] = '25',
    global_: Optional[bool] = Query(False, alias='global'),
):
    """
    Get All Datasets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/language/datasets/upload',
    description=""" Creates a dataset, labels, and examples from the specified .csv, .tsv, or .json file. The call returns immediately and continues to upload data in the background. """,
    tags=['dataset_management', 'dataset_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def upload_dataset_async(file: UploadFile):
    """
    Create a Dataset From a File Asynchronously
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/language/datasets/upload/sync',
    description=""" Creates a dataset, labels, and examples from the specified .csv, .tsv, or .json file. The call returns after the dataset is created and all of the data is uploaded. """,
    tags=['dataset_management', 'dataset_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def upload_dataset_sync(file: UploadFile):
    """
    Create a Dataset From a File Synchronously
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/language/datasets/{datasetId}',
    description=""" Deletes the specified dataset and associated labels and examples. """,
    tags=['dataset_management', 'dataset_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_dataset(dataset_id: str = Path(..., alias='datasetId')):
    """
    Delete a Dataset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/language/datasets/{datasetId}',
    description=""" Returns a single dataset. """,
    tags=['dataset_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_dataset(dataset_id: str = Path(..., alias='datasetId')):
    """
    Get a Dataset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/language/datasets/{datasetId}/examples',
    description=""" Returns all the examples for the specified dataset, """,
    tags=['example_handling', 'example_retrieval'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_examples(
    dataset_id: str = Path(..., alias='datasetId'),
    offset: Optional[str] = '0',
    count: Optional[str] = '100',
    source: Optional[Source1] = None,
):
    """
    Get All Examples
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/language/datasets/{datasetId}/models',
    description=""" Returns all models for the specified dataset. """,
    tags=['dataset_management', 'model_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_trained_models(
    offset: Optional[str] = '0',
    count: Optional[str] = '100',
    dataset_id: str = Path(..., alias='datasetId'),
):
    """
    Get All Models
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/language/datasets/{datasetId}/upload',
    description=""" Adds examples from a .csv, .tsv, or .json file to a dataset. """,
    tags=['dataset_management', 'example_handling', 'dataset_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def update_dataset_async(
    dataset_id: str = Path(..., alias='datasetId'), file: UploadFile = ...
):
    """
    Create Examples From a File
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/language/deletion/{id}',
    description=""" Returns the status of a language dataset or model deletion. When you delete a dataset or model, the deletion may not occur immediately. Use this call to find out when the deletion is complete. """,
    tags=['dataset_management', 'dataset_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get(id: str):
    """
    Get Deletion Status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/language/examples',
    description=""" Returns all the examples for the specified label. Returns both uploaded examples and feedback examples. """,
    tags=['example_handling', 'example_retrieval'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_examples_by_label(
    label_id: Optional[str] = Query(None, alias='labelId'),
    offset: Optional[str] = '0',
    count: Optional[str] = '100',
):
    """
    Get All Examples for Label
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/language/feedback',
    description=""" Adds a feedback example to the dataset associated with the specified model. """,
    tags=['example_handling', 'dataset_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def provide_feedback(file: UploadFile):
    """
    Create a Feedback Example
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/language/intent',
    description=""" Returns an intent prediction for the given string. """,
    tags=['prediction_handling', 'model_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def intent_multipart(body: IntentPredictRequest = None):
    """
    Prediction for Intent
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/language/models/{modelId}',
    description=""" Deletes the specified model. """,
    tags=['model_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_model(model_id: str = Path(..., alias='modelId')):
    """
    Delete a Model
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/language/models/{modelId}',
    description=""" Returns the metrics for a model """,
    tags=['model_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_trained_model_metrics(model_id: str = Path(..., alias='modelId')):
    """
    Get Model Metrics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/language/models/{modelId}/lc',
    description=""" Returns the metrics for each epoch in a model. """,
    tags=[
        'model_management',
        'training_process_management',
        'training_status_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_trained_model_learning_curve(
    model_id: str = Path(..., alias='modelId'),
    offset: Optional[str] = '0',
    count: Optional[str] = '25',
):
    """
    Get Model Learning Curve
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/language/retrain',
    description=""" Retrains a dataset and updates a model. Use this API call when you want to update a model and keep the model ID instead of creating a new model. """,
    tags=['dataset_management', 'training_process_management', 'dataset_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def retrain(file: UploadFile):
    """
    Retrain a Dataset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/language/sentiment',
    description=""" Returns a sentiment prediction for the given string. """,
    tags=['prediction_handling'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def sentiment_multipart(body: SentimentPredictRequest = None):
    """
    Prediction for Sentiment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/language/train',
    description=""" Trains a dataset and creates a model. """,
    tags=['dataset_management', 'training_process_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def train(file: UploadFile):
    """
    Train a Dataset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/language/train/{modelId}',
    description=""" Returns the status of a model's training process. Use the progress field to determine how far the training has progressed. When training completes successfully, the status is SUCCEEDED and the progress is 1. """,
    tags=[
        'model_management',
        'training_process_management',
        'training_status_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_train_status_and_progress(model_id: str = Path(..., alias='modelId')):
    """
    Get Training Status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/oauth2/token',
    description=""" Returns an OAuth access token or a refresh token. You must pass a valid access token in the header of each API call. """,
    tags=['api_usage_management'],
)
def generate_token_v2(request: Request):
    """
    Generate an OAuth Token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/oauth2/tokens/{token}',
    tags=['api_usage_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def revoke_refresh_token_v2(token: str):
    """
    Delete a Refresh Token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/vision/bulkfeedback',
    description=""" Adds feedback examples to the dataset associated with the specified object detection model. """,
    tags=['example_handling', 'dataset_management', 'dataset_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def update_dataset_async_1(file: UploadFile):
    """
    Create Feedback Examples From a Zip File
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/vision/datasets',
    description=""" Returns a list of datasets and their labels that were created by the current user. The response is sorted by dataset ID. """,
    tags=['dataset_management', 'dataset_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def list_datasets_1(
    offset: Optional[str] = '0',
    count: Optional[str] = '25',
    global_: Optional[bool] = Query(False, alias='global'),
):
    """
    Get All Datasets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/vision/datasets',
    description=""" Creates a dataset and labels, if they're specified. """,
    tags=['dataset_management', 'dataset_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def create_dataset(file: UploadFile):
    """
    Create a Dataset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/vision/datasets/upload',
    description=""" Creates a dataset, labels, and examples from the specified .zip file. The call returns immediately and continues to upload the images in the background. """,
    tags=['dataset_management', 'dataset_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def upload_dataset_async_1(file: UploadFile):
    """
    Create a Dataset From a Zip File Asynchronously
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/vision/datasets/upload/sync',
    description=""" Creates a dataset, labels, and examples from the specified .zip file. The call returns after the dataset is created and all of the images are uploaded. """,
    tags=['dataset_management', 'dataset_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def upload_dataset_sync_1(file: UploadFile):
    """
    Create a Dataset From a Zip File Synchronously
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/vision/datasets/{datasetId}',
    description=""" Deletes the specified dataset and associated labels and examples. """,
    tags=['dataset_management', 'dataset_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_dataset_1(dataset_id: str = Path(..., alias='datasetId')):
    """
    Delete a Dataset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/vision/datasets/{datasetId}',
    description=""" Returns a single dataset. """,
    tags=['dataset_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_dataset_1(dataset_id: str = Path(..., alias='datasetId')):
    """
    Get a Dataset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/vision/datasets/{datasetId}/examples',
    description=""" Returns all the examples for the specified dataset. By default, returns examples created by uploading them from a .zip file. """,
    tags=['example_handling', 'example_retrieval', 'dataset_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_examples_1(
    dataset_id: str = Path(..., alias='datasetId'),
    offset: Optional[str] = '0',
    count: Optional[str] = '100',
    source: Optional[Source1] = None,
):
    """
    Get All Examples
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/vision/datasets/{datasetId}/examples',
    description=""" Adds an example with the specified label to a dataset. """,
    tags=['dataset_management', 'example_handling', 'dataset_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def add_example(dataset_id: str = Path(..., alias='datasetId'), file: UploadFile = ...):
    """
    Create an Example
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/vision/datasets/{datasetId}/models',
    description=""" Returns all models for the specified dataset. """,
    tags=['dataset_management', 'model_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_trained_models_1(
    offset: Optional[str] = '0',
    count: Optional[str] = '100',
    dataset_id: str = Path(..., alias='datasetId'),
):
    """
    Get All Models
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v2/vision/datasets/{datasetId}/upload',
    description=""" Adds examples from a .zip file to a dataset. You can use this call only with a dataset that was created from a .zip file. """,
    tags=['dataset_management', 'example_handling', 'dataset_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def update_dataset_async_2(
    dataset_id: str = Path(..., alias='datasetId'), file: UploadFile = ...
):
    """
    Create Examples From a Zip File
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/vision/deletion/{id}',
    description=""" Returns the status of an image dataset or model deletion. When you delete a dataset or model, the deletion may not occur immediately. Use this call to find out when the deletion is complete. """,
    tags=['dataset_management', 'dataset_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_1(id: str):
    """
    Get Deletion Status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/vision/detect',
    description=""" Returns labels, probabilities, and bounding box coordinates for items detected in the specified local image file. """,
    tags=['prediction_handling', 'model_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def detect_multipart(body: ObjectDetectionRequest = None):
    """
    Detection with Image File
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/vision/examples',
    description=""" Returns all the examples for the specified label. Returns both uploaded examples and feedback examples. """,
    tags=['example_handling', 'example_retrieval'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_examples_by_label_1(
    label_id: Optional[str] = Query(None, alias='labelId'),
    offset: Optional[str] = '0',
    count: Optional[str] = '100',
):
    """
    Get All Examples for Label
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/vision/feedback',
    description=""" Adds a feedback example to the dataset associated with the specified model. """,
    tags=['example_handling', 'dataset_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def provide_feedback_1(file: UploadFile):
    """
    Create a Feedback Example
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/vision/models/{modelId}',
    description=""" Deletes the specified model. """,
    tags=['model_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def delete_model_1(model_id: str = Path(..., alias='modelId')):
    """
    Delete a Model
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/vision/models/{modelId}',
    description=""" Returns the metrics for a model """,
    tags=['model_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_trained_model_metrics_1(model_id: str = Path(..., alias='modelId')):
    """
    Get Model Metrics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/vision/models/{modelId}/lc',
    description=""" Returns the metrics for each epoch in a model. """,
    tags=['model_management', 'training_status_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_trained_model_learning_curve_1(
    model_id: str = Path(..., alias='modelId'),
    offset: Optional[str] = '0',
    count: Optional[str] = '25',
):
    """
    Get Model Learning Curve
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/vision/ocr',
    description=""" Returns a prediction from an OCR model for the specified image URL or local image file. """,
    tags=['prediction_handling'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def ocr_multipart(file: UploadFile):
    """
    Detect Text
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/vision/predict',
    description=""" Returns a prediction from an image or multi-label model for the specified image. """,
    tags=['prediction_handling', 'model_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def predict_multipart(body: ImageClassificationRequest = None):
    """
    Make Prediction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/vision/retrain',
    description=""" Retrains a dataset and updates a model. Use this API call when you want to update a model and keep the model ID instead of creating a new model. """,
    tags=['dataset_management', 'training_process_management', 'dataset_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def retrain_1(file: UploadFile):
    """
    Retrain a Dataset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/vision/train',
    description=""" Trains a dataset and creates a model. """,
    tags=[
        'dataset_management',
        'training_process_management',
        'training_status_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def train_1(file: UploadFile):
    """
    Train a Dataset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/vision/train/{modelId}',
    description=""" Returns the status of a model's training process. Use the progress field to determine how far the training has progressed. When training completes successfully, the status is SUCCEEDED and the progress is 1. """,
    tags=[
        'model_management',
        'training_process_management',
        'training_status_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_train_status_and_progress_1(model_id: str = Path(..., alias='modelId')):
    """
    Get Training Status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
